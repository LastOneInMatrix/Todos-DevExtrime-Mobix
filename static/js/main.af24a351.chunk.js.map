{"version":3,"sources":["App.module.css","API/appAPI.ts","Store/Users.ts","Store/Todo.ts","Popup/Popup.tsx","Test/TestList.tsx","Todos/Todos.tsx","Users/Users.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","usersAPI","get","then","res","data","todosAPI","id","payload","patch","delete","title","post","userId","users","userResponseStatus","activeUser","makeAutoObservable","this","a","setStatus","response","Error","status","message","err","todos","parseInt","v1","split","join","completed","activeTodoId","actionType","deep","console","log","userStore","newTask","unshift","filter","t","map","action","RenderContent","observer","props","useState","todoStore","text","setText","onSubmit","event","type","catch","e","togglePopup","preventDefault","dataField","defaultValue","onOptionChanged","value","placeholder","className","useSubmitBehavior","buttonOptions","PopupForChanging","visible","isPopupVisible","closeOnOutsideClick","onHiding","width","height","resizeEnabled","contentRender","ListItemTmpl","style","display","justifyContent","onValueChange","setActiveTodoId","completeTodo","margin","icon","onClick","setActionType","deleteTodo","toJS","renderLabel","name","TestListComponent","history","useHistory","backButtonOptions","push","notify","setPopupVisibility","addButtonOptions","Fragment","location","widget","options","refreshButtonOptions","locateInMenu","render","searchMode","searchExpr","searchEnabled","itemComponent","dataSource","selectionMode","pageLoadMode","scrollByContent","showScrollbar","padding","allowReordering","Todos","params","useParams","useEffect","fetchTodo","userTodos","ListItem","Users","activeId","setActiveId","getUsers","userMemo","useMemo","u","to","shading","onItemClick","itemData","setActiveUser","App","main","sidebar","buttonsBlock","exact","path","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af24a351.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__2tEjO\",\"sidebar\":\"App_sidebar__2u_wQ\",\"buttonsBlock\":\"App_buttonsBlock__6zcgR\"};","import axios from 'axios';\r\n\r\nexport type UserResponseType = {\r\n    name: string,\r\n    id: number\r\n};\r\nexport type TaskResponseType = {\r\n    id: number,\r\n    title: string,\r\n    body: '',\r\n    userId: number\r\n};\r\n\r\nexport type TodoResponseType = { userId: number | undefined, id: number, title: string, completed: boolean};\r\n\r\ntype ErrorType = {}; // в данном REST API - не приходит респонс при ошибках\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<UserResponseType[]>('users').then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const todosAPI = {\r\n    getTodos() {\r\n        return instance.get<TodoResponseType[] & ErrorType>('todos').then(res => res.data)\r\n    },\r\n    updateTodos(id: string | number, payload: {[key: string]: string | boolean}) {\r\n        return  instance.patch<TodoResponseType[] & ErrorType>(`/todos/${id}`, payload).then(res => {\r\n            return res.data;\r\n        })\r\n    },\r\n    deleteTodos(id: number | string) {\r\n        return instance.delete<{}>(`/todos/${id}`).then(res => res.data)\r\n    },\r\n    addTask(id: number, title: string) {\r\n        return instance.post<TaskResponseType>(`/todos/`, {title: title, userId: id}).then(res => res.data)\r\n    }\r\n}","import {makeAutoObservable} from \"mobx\";\r\nimport {UserResponseType, usersAPI} from \"../API/appAPI\";\r\n\r\n\r\n\r\nclass User {\r\n    users: UserResponseType[] = [];\r\n    userResponseStatus: string = '';\r\n    activeUser: UserResponseType | null = null\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n    setActiveUser(activeUser: UserResponseType) {\r\n        this.activeUser = activeUser\r\n    }\r\n    async getUsers() {\r\n        try {\r\n            this.setStatus('Загрузка...')\r\n            this.users = await usersAPI.getUsers()\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n            this.setStatus('')\r\n        }\r\n    }\r\n    setStatus(err: string) {\r\n        this.userResponseStatus = err\r\n    }\r\n}\r\nexport default new User()","import {makeAutoObservable} from \"mobx\";\r\nimport {v1} from \"uuid\";\r\nimport userStore from '../Store/Users'\r\nimport {TodoResponseType, todosAPI} from \"../API/appAPI\";\r\n\r\nexport type TodoType = TodoResponseType;\r\nclass Todo {\r\n    todos: TodoResponseType[] = [\r\n        {\r\n            userId: parseInt(v1().split('-').join(''), 16),\r\n            id: 129019203,\r\n            title: 'new',\r\n            completed: false,\r\n        }\r\n    ]\r\n    activeTodoId: { id: number, title?: string } = {id: 0, title: ''}\r\n    actionType: string = ''\r\n    constructor() {\r\n        makeAutoObservable(this, {}, {deep: true});\r\n    }\r\n    async fetchTodo() {\r\n        try {\r\n            this.todos = await todosAPI.getTodos()\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n            console.log('Загрузка окончена')\r\n        }\r\n    }\r\n    async addTodo(title: string) {\r\n        try {\r\n           console.log(userStore.activeUser?.id)\r\n            const newTask = await todosAPI.addTask(userStore.activeUser?.id ?? parseInt(v1().split('-').join(''), 16), title);\r\n            this.todos.unshift({\r\n                ...newTask,\r\n                completed: false\r\n            })\r\n        }\r\n        catch (e: any){\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n\r\n        }\r\n    }\r\n    async deleteTodo(id: string | number) {\r\n        try{\r\n            await todosAPI.deleteTodos(id)\r\n            this.todos = this.todos.filter(t => t.id !== id)\r\n        }\r\n        catch(e: any){\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n\r\n        }\r\n    }\r\n    async completeTodo(id: string | number, completed: boolean) {\r\n        try {\r\n            await todosAPI.updateTodos(id, {\r\n                completed\r\n            })\r\n            this.todos = this.todos.map(t => t.id === id ? {...t, completed: !t.completed} : t)\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {}\r\n    }\r\n    async changeTitleForTask(title: string)  {\r\n        await todosAPI.updateTodos(this.activeTodoId.id, {title})\r\n        this.todos = this.todos.map(t => t.id === this.activeTodoId.id ? {...t, title} : t)\r\n    }\r\n    setActiveTodoId(id: number, title?: string) {\r\n        this.activeTodoId.id = id\r\n        this.activeTodoId.title = title ?? ''\r\n    }\r\n    setActionType(action: string) {\r\n        this.actionType =action\r\n    }\r\n}\r\n\r\nexport default new Todo()","import React, {FormEvent, useState} from 'react';\r\nimport {Popup} from 'devextreme-react/popup';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport todoStore from \"../Store/Todo\";\r\nimport Button from \"devextreme-react/button\";\r\nimport {TextBox} from \"devextreme-react\";\r\nimport {ButtonItem, Form, SimpleItem,} from 'devextreme-react/form';\r\n\r\n\r\nconst RenderContent = observer((props: any) =>  {\r\n    const [text, setText] = useState<string>(todoStore.activeTodoId.title ?? '');\r\n    const sendData = (event: FormEvent<HTMLFormElement>) => {\r\n        const type = props.actionType === 'Add' ? 'addTodo' : 'changeTitleForTask';\r\n        todoStore\r\n        [type](text)\r\n            .catch(e=>console.log(e))\r\n        props.togglePopup();\r\n        event.preventDefault();\r\n    }\r\n    const submitButtonOptions = {\r\n        text: \"Submit the Form\",\r\n        useSubmitBehavior: true\r\n    };\r\n    return (\r\n        <form action=\"your-action\" onSubmit={sendData}>\r\n            <Form>\r\n                <SimpleItem dataField=\"Title\">\r\n                    <TextBox\r\n                        defaultValue={text}\r\n                        onOptionChanged={e => {\r\n                            setText(e.value)\r\n                        }}\r\n                        placeholder={'Please type title for task'}\r\n                    />\r\n                </SimpleItem>\r\n                <Button\r\n                    id=\"button\"\r\n                    text=\"Change Task Status\"\r\n                    type=\"success\"\r\n                    className=\"dx-field-item\"\r\n                    useSubmitBehavior={true}\r\n                />\r\n                <ButtonItem buttonOptions={submitButtonOptions} />\r\n            </Form>\r\n        </form>\r\n\r\n    )\r\n})\r\nexport const PopupForChanging = observer((props: any) =>  {\r\n    return (\r\n        <div className=\"App\">\r\n            <Popup\r\n                title={`${props.actionType} task`}\r\n                visible={props.isPopupVisible}\r\n                closeOnOutsideClick={true}\r\n                onHiding={props.togglePopup}\r\n                width={500}\r\n                height={250}\r\n                resizeEnabled={true}\r\n                contentRender={() => <RenderContent actionType={props.actionType} togglePopup={props.togglePopup} id={todoStore.activeTodoId}/>}\r\n            />\r\n        </div>\r\n    );\r\n})\r\n\r\n","import Button from 'devextreme-react/button';\r\nimport React, {useState} from 'react';\r\nimport List, {ItemDragging} from 'devextreme-react/list';\r\nimport {toJS} from 'mobx';\r\nimport todoStore, {TodoType} from \"../Store/Todo\";\r\nimport {CheckBox} from 'devextreme-react/check-box';\r\nimport {PopupForChanging} from \"../Popup/Popup\";\r\nimport Toolbar, {Item} from 'devextreme-react/toolbar';\r\nimport notify from \"devextreme/ui/notify\";\r\nimport {useHistory} from \"react-router\";\r\nimport userStore from \"../Store/Users\"\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\nexport type ConnectedPropsType = any\r\n\r\nconst ListItemTmpl: React.FC<ConnectedPropsType> = observer((props) => {\r\n    const style = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    }\r\n    return (\r\n        <div style={style}>\r\n            <div>\r\n                <CheckBox value={props.data.data.completed} onValueChange={() => {\r\n                    todoStore.setActiveTodoId(props.data.data.id)\r\n                    todoStore.completeTodo(todoStore.activeTodoId.id, !props.data.data.completed).catch(e => console.log(e))\r\n                }}/>\r\n                {props.data.data.title}\r\n            </div>\r\n\r\n            {/* eslint-disable-next-line react/jsx-no-undef */}\r\n            <div>\r\n                <Button width={45} style={{margin: '10px'}} icon='rename' onClick={() => {\r\n                    todoStore.setActionType('Change')\r\n                    props.togglePopup(props.data.data.id)\r\n                    todoStore.setActiveTodoId(props.data.data.id, props.data.data.title)\r\n                }}/>\r\n                <Button\r\n                    width={45}\r\n                    icon=\"trash\"\r\n                    type=\"danger\"\r\n                    onClick={() => todoStore.deleteTodo(toJS(props.data.data.id))}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n})\r\n\r\ntype ListPropsType = { todos: TodoType[]};\r\n\r\nfunction renderLabel() {\r\n    return <div className=\"toolbar-label\"><b>Todo&apos;s for</b> {userStore.activeUser?.name}</div>;\r\n}\r\n\r\nexport const TestListComponent = (props: ListPropsType) => {\r\n\r\n    const history = useHistory()\r\n    const backButtonOptions = {\r\n        type: 'back',\r\n        onClick: () => {\r\n            history.push('/')\r\n            todoStore.todos = [] //TODO узнать насчет прямого изменения без экшена\r\n            notify('Здесь будет возврат на юзеров');\r\n        }\r\n    };\r\n\r\n    const [isPopupVisible, setPopupVisibility] = useState(false);\r\n\r\n    const togglePopup = () => {\r\n        setPopupVisibility(!isPopupVisible);\r\n    };\r\n    const addButtonOptions = {\r\n        icon: 'plus',\r\n        onClick: () => {\r\n            todoStore.setActionType('Add')\r\n            setPopupVisibility(!isPopupVisible)\r\n            // todoStore.addTodo('s')\r\n            //     .then(e => notify('Таска добавилась', 'result', 1000))\r\n            //     .catch(e => {\r\n            //         debugger\r\n            //         notify(`Ошибка добавления ${e}`, 'error', 2000)\r\n            //     })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n            <Toolbar>\r\n                <Item location=\"before\"\r\n                      widget=\"dxButton\"\r\n                      options={backButtonOptions}/>\r\n                <Item location=\"before\"\r\n                      widget=\"dxButton\"\r\n                      options={refreshButtonOptions}/>\r\n                <Item location=\"after\"\r\n                      locateInMenu=\"auto\"\r\n                      widget=\"dxButton\"\r\n                      options={addButtonOptions}/>\r\n                <Item location=\"center\"\r\n                      locateInMenu=\"never\"\r\n                      render={renderLabel}/>\r\n            </Toolbar>\r\n            <List\r\n                height={'100vh'}\r\n                searchMode={'contains'}\r\n                searchExpr={['title']}\r\n                searchEnabled={true}\r\n                itemComponent={(data) => (\r\n                    <ListItemTmpl data={data} togglePopup={togglePopup}/>\r\n                )}\r\n                dataSource={props.todos}\r\n                selectionMode=\"multiple\"\r\n                pageLoadMode=\"nextButton\"\r\n                scrollByContent={true}\r\n                showScrollbar=\"never\"\r\n                style={{padding: '22px', margin: '10px'}}\r\n            >\r\n                <ItemDragging\r\n                    allowReordering={true}\r\n                />\r\n            </List>\r\n            <PopupForChanging actionType={todoStore.actionType} isPopupVisible={isPopupVisible} togglePopup={togglePopup}/>\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nconst refreshButtonOptions = {\r\n    icon: 'refresh',\r\n    onClick: () => {\r\n        notify('Здесь будет обновление!');\r\n    }\r\n};\r\n\r\n\r\n\r\n","import todoStore from '../Store/Todo';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useEffect} from \"react\";\r\nimport {TestListComponent} from \"../Test/TestList\";\r\nimport {useParams} from \"react-router\";\r\n\r\nexport const Todos = observer(() => {\r\n        const params = useParams<{ userId: string }>()\r\n        useEffect(() => {\r\n            todoStore.fetchTodo().catch(e => console.log(e))\r\n        }, [])\r\n\r\n    const userTodos = todoStore.todos.filter((t) => t.userId === +params.userId)\r\n    console.log(userTodos)\r\n        // console.log((userTodos1.map(t => toJS(t)))) //TODO не могу понять, как это влияет\r\n        return <>\r\n                <TestListComponent todos={userTodos}/>\r\n            </>\r\n    }\r\n)","import React, {useEffect, useMemo, useState} from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport userStore from \"../Store/Users\"\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport List, {MenuItem} from 'devextreme-react/list';\r\nimport notify from 'devextreme/ui/notify';\r\nimport {ItemClickEvent} from \"devextreme/ui/list\";\r\nimport {Redirect} from \"react-router\";\r\n\r\ntype ListItemPropsType = {\r\n    data: { id: number, name: string }\r\n}\r\ntype UsersPropsType = {}\r\n\r\nconst style = {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n}\r\nconst ListItem = (props: ListItemPropsType) => {\r\n\r\n    return (\r\n        <pre style={style}>\r\n                    <b>{props.data.name}</b>\r\n                    <b>Users id: {props.data.id}</b>\r\n            </pre>\r\n\r\n    );\r\n};\r\n\r\nexport const Users: React.FC<UsersPropsType> = observer((props) => {\r\n    const [activeId, setActiveId] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        userStore.getUsers()\r\n            .catch(e => {\r\n                userStore.setStatus(e)\r\n            })\r\n    }, [])\r\n    const userMemo = useMemo(() => {\r\n        return userStore.users.map((u) => {\r\n            return {id: u.id, name: u.name}\r\n        })\r\n    }, [userStore.users])\r\n    const selectItem = ({itemData, ...rest}: ItemClickEvent) => {\r\n        userStore.setActiveUser(itemData)\r\n        setActiveId(itemData.id)\r\n    };\r\n    const showItem = ({itemData}: any) => {\r\n        notify({\r\n            message: `Name: ${itemData.name} ID: ${itemData.id}`,\r\n            width: 250,\r\n            height: 250,\r\n            shading: true\r\n        }, \"info\", 2000);\r\n    }\r\n    if (activeId !== '') {\r\n        return <Redirect to={`/todos/${activeId}`}/>\r\n    }\r\n    if (userStore.userResponseStatus) {\r\n        notify({\r\n            message: userStore.userResponseStatus,\r\n            width: 200,\r\n            height: 50,\r\n            shading: true\r\n        })\r\n    }\r\n    return <div>\r\n        <b> Выберите юзера </b>\r\n        <List\r\n            height={'100vh'}\r\n            dataSource={userMemo}\r\n            itemComponent={ListItem}\r\n            onItemClick={selectItem}\r\n        >\r\n            {/* eslint-disable-next-line react/jsx-no-undef */}\r\n            <MenuItem\r\n                text=\"Show Details\"\r\n                action={showItem}\r\n            />\r\n\r\n        </List>\r\n\r\n        There will be User\r\n    </div>\r\n})","import React from 'react';\nimport 'devextreme/dist/css/dx.light.css';\nimport style from './App.module.css'\nimport {Todos} from \"./Todos/Todos\";\nimport {Users} from \"./Users/Users\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\n\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <HashRouter>\n                <div className={style.main}>\n                    <div className={style.sidebar}></div>\n                    <div className={style.buttonsBlock}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Users/>}/>\n                            <Route exact path={'/todos/:userId?'} render={() => <Todos/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}