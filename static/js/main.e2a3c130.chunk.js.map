{"version":3,"sources":["App.module.css","Users/users.module.css","TestList/testList.module.css","Popup/popup.module.css","API/appAPI.ts","Store/Users.ts","Store/Todo.ts","Popup/Popup.tsx","TestList/TestList.tsx","Todos/Todos.tsx","Users/Users.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","usersAPI","get","then","res","data","todosAPI","id","payload","patch","delete","title","post","userId","users","userResponseStatus","activeUser","makeAutoObservable","this","a","setStatus","response","Error","status","message","err","todos","parseInt","v1","split","join","completed","activeTodoId","actionType","deep","console","log","userStore","newTask","unshift","filter","t","map","action","RenderContent","observer","props","useState","text","setText","useEffect","todoStore","onSubmit","event","type","catch","e","togglePopup","preventDefault","dataField","value","onValueChanged","newValue","placeholder","className","useSubmitBehavior","buttonOptions","PopupForChanging","st","container","visible","isPopupVisible","closeOnOutsideClick","onHiding","resizeEnabled","contentRender","ListItemTmpl","styles","taskText","onValueChange","setActiveTodoId","completeTodo","width","style","margin","icon","onClick","setActionType","deleteTodo","toJS","renderLabel","name","TestListComponent","history","useHistory","backButtonOptions","push","notify","setPopupVisibility","addButtonOptions","location","widget","options","refreshButtonOptions","locateInMenu","render","height","searchMode","searchExpr","searchEnabled","itemComponent","dataSource","selectionMode","pageLoadMode","scrollByContent","showScrollbar","padding","allowReordering","Todos","params","useParams","fetchTodo","userTodos","display","justifyContent","ListItem","Users","activeId","setActiveId","getUsers","userMemo","useMemo","u","to","shading","main","onItemClick","itemData","setActiveUser","App","sidebar","content","exact","path","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2a3c130.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__2tEjO\",\"sidebar\":\"App_sidebar__2u_wQ\",\"content\":\"App_content__23UeV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"users_main__3O3RZ\",\"title\":\"users_title__2rcFB\",\"container\":\"users_container__2opSq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"testList_container__vjLnN\",\"taskText\":\"testList_taskText__1h9Vv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"popup_container__15D_l\"};","import axios from 'axios';\r\n\r\nexport type UserResponseType = {\r\n    name: string,\r\n    id: number\r\n};\r\nexport type TaskResponseType = {\r\n    id: number,\r\n    title: string,\r\n    body: '',\r\n    userId: number\r\n};\r\n\r\nexport type TodoResponseType = { userId: number | undefined, id: number, title: string, completed: boolean};\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<UserResponseType[]>('users').then(res => res.data)\r\n    }\r\n};\r\nexport const todosAPI = {\r\n    getTodos() {\r\n        return instance.get<TodoResponseType[]>('todos').then(res => res.data)\r\n    },\r\n    updateTodos(id: string | number, payload: {[key: string]: string | boolean}) {\r\n        return  instance.patch<TodoResponseType[]>(`/todos/${id}`, payload).then(res => {\r\n            return res.data;\r\n        })\r\n    },\r\n    deleteTodos(id: number | string) {\r\n        return instance.delete<{}>(`/todos/${id}`).then(res => res.data)\r\n    },\r\n    addTask(id: number, title: string) {\r\n        return instance.post<TaskResponseType>(`/todos/`, {title: title, userId: id}).then(res => res.data)\r\n    }\r\n};","import {makeAutoObservable} from \"mobx\";\r\nimport {UserResponseType, usersAPI} from \"../API/appAPI\";\r\n\r\ninterface IUsers {\r\n    users: UserResponseType[];\r\n    userResponseStatus: string;\r\n    activeUser: UserResponseType | null;\r\n    setActiveUser: (activeUser: UserResponseType) => void;\r\n    getUsers: () => void;\r\n    setStatus: (err: string) => void;\r\n}\r\n\r\nclass Users implements IUsers {\r\n    users: UserResponseType[] = [];\r\n    userResponseStatus: string = '';\r\n    activeUser: UserResponseType | null = null\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n    setActiveUser(activeUser: UserResponseType) {\r\n        this.activeUser = activeUser\r\n    }\r\n    async getUsers() {\r\n        try {\r\n            this.setStatus('Загрузка...')\r\n            this.users = await usersAPI.getUsers()\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n            this.setStatus('')\r\n        }\r\n    }\r\n    setStatus(err: string) {\r\n        this.userResponseStatus = err\r\n    }\r\n}\r\nexport default new Users()","import {makeAutoObservable} from \"mobx\";\r\nimport {v1} from \"uuid\";\r\nimport userStore from '../Store/Users'\r\nimport {TodoResponseType, todosAPI} from \"../API/appAPI\";\r\n\r\nexport type TodoType = TodoResponseType;\r\nexport type ActiveTodoType = { id: number, title?: string };\r\n\r\ninterface ITodo {\r\n    todos: TodoResponseType[];\r\n    activeTodoId: ActiveTodoType;\r\n    actionType: string;\r\n    fetchTodo: () => void;\r\n    addTodo: (title: string) => void;\r\n    deleteTodo: (id: string | number) => void;\r\n    completeTodo: (id: string | number, completed: boolean) => void;\r\n    changeTitleForTask: (title: string) => void;\r\n    setActiveTodoId: (id: number, title?: string) => void;\r\n    setActionType: (action: string) => void;\r\n}\r\n\r\nclass Todo implements ITodo {\r\n    todos: TodoResponseType[] = [\r\n        {\r\n            userId: parseInt(v1().split('-').join(''), 16),\r\n            id: 129019203,\r\n            title: 'new',\r\n            completed: false,\r\n        }\r\n    ]\r\n    activeTodoId: ActiveTodoType = {id: 0, title: ''}\r\n    actionType: string = ''\r\n    constructor() {\r\n        makeAutoObservable(this, {}, {deep: true});\r\n    }\r\n    async fetchTodo() {\r\n        try {\r\n            this.todos = await todosAPI.getTodos()\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n            console.log('Загрузка окончена')\r\n        }\r\n    }\r\n    async addTodo(title: string) {\r\n        try {\r\n           console.log(userStore.activeUser?.id)\r\n            const newTask = await todosAPI.addTask(userStore.activeUser?.id ?? parseInt(v1().split('-').join(''), 16), title);\r\n            this.todos.unshift({\r\n                ...newTask,\r\n                completed: false\r\n            })\r\n        }\r\n        catch (e: any){\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n\r\n        }\r\n    }\r\n    async deleteTodo(id: string | number) {\r\n        try{\r\n            await todosAPI.deleteTodos(id)\r\n            this.todos = this.todos.filter(t => t.id !== id)\r\n        }\r\n        catch(e: any){\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {\r\n\r\n        }\r\n    }\r\n    async completeTodo(id: string | number, completed: boolean) {\r\n        try {\r\n            await todosAPI.updateTodos(id, {completed})\r\n            this.todos = this.todos.map(t => t.id === id ? {...t, completed: !t.completed} : t)\r\n        }\r\n        catch(e: any) {\r\n            throw e.response ?  new Error (`Статус ${e.response.status}`) : new Error ( e.message + ', more details in the console')\r\n        }\r\n        finally {}\r\n    }\r\n    async changeTitleForTask(title: string)  {\r\n        await todosAPI.updateTodos(this.activeTodoId.id, {title})\r\n        this.todos = this.todos.map(t => t.id === this.activeTodoId.id ? {...t, title} : t)\r\n    }\r\n    setActiveTodoId(id: number, title?: string) {\r\n        this.activeTodoId.id = id\r\n        this.activeTodoId.title = title ?? ''\r\n    }\r\n    setActionType(action: string) {\r\n        this.actionType = action\r\n    }\r\n}\r\n\r\nexport default new Todo()","import React, {FormEvent, useEffect, useState} from 'react';\r\nimport {Popup} from 'devextreme-react/popup';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport todoStore from \"../Store/Todo\";\r\nimport Button from \"devextreme-react/button\";\r\nimport {TextBox} from \"devextreme-react\";\r\nimport {ButtonItem, Form, SimpleItem,} from 'devextreme-react/form';\r\nimport st from './popup.module.css'\r\n// import DevExpress from \"devextreme\";\r\n// import NativeEventInfo = DevExpress.events.NativeEventInfo;\r\n// import dxTextBox from \"devextreme/ui/text_box\";\r\n// import {ValueChangedInfo} from \"devextreme/ui/editor/editor\";\r\n\r\n\r\ntype PopupForChangingPropsType = {\r\n    actionType: string;\r\n    isPopupVisible: boolean;\r\n    togglePopup: () => void;\r\n}\r\ntype RenderContentPropsType = {\r\n    actionType: string;\r\n    togglePopup: () => void;\r\n}\r\nconst RenderContent: React.FC<RenderContentPropsType> = observer((props ) =>  {\r\n    const [text, setText] = useState<string>('');\r\n    useEffect(() => {\r\n        setText(todoStore.activeTodoId.title ?? '');\r\n        return () => {\r\n            setText('');\r\n        }\r\n    }, [todoStore.activeTodoId.title]); //Todo уточнить насчет мутируемых депов\r\n\r\n    const sendData = (event: FormEvent<HTMLFormElement>) => {\r\n        const type = props.actionType === 'Add' ? 'addTodo' : 'changeTitleForTask';\r\n        todoStore\r\n        [type](text)\r\n            .catch(e=>console.log(e))\r\n        props.togglePopup();\r\n        event.preventDefault();\r\n        todoStore.activeTodoId.title = ''\r\n    }\r\n    const submitButtonOptions = {\r\n        text: \"Submit the Form\",\r\n        useSubmitBehavior: true\r\n    };\r\n\r\n    const valueChangedHandler = (e: any) => {\r\n        const newValue = e.value;\r\n        setText(newValue);\r\n    };\r\n    return (\r\n        <form action=\"action\" onSubmit={sendData}>\r\n            <Form>\r\n                <SimpleItem dataField=\"Title\">\r\n                    <TextBox\r\n                        // defaultValue={text}\r\n                        // onOptionChanged={e => {\r\n                        //     setText(e.value)\r\n                        // }} //Todo разобраться с работой при изменении в TextBox и как правильно типизировать events\r\n                        value={text}\r\n                        onValueChanged={valueChangedHandler}\r\n                        placeholder={'Please type title for task'}\r\n                    />\r\n                </SimpleItem>\r\n                <Button\r\n                    id=\"button\"\r\n                    text=\"Change Task Status\"\r\n                    type=\"success\"\r\n                    className=\"dx-field-item\"\r\n                    useSubmitBehavior={true}\r\n                />\r\n                <ButtonItem buttonOptions={submitButtonOptions} />\r\n            </Form>\r\n        </form>\r\n    )\r\n});\r\n\r\nexport const PopupForChanging: React.FC<PopupForChangingPropsType> = observer((props) =>  {\r\n    return (\r\n        <div className={st.container}>\r\n            <Popup\r\n                title={`${props.actionType} task`}\r\n                visible={props.isPopupVisible}\r\n                closeOnOutsideClick={true}\r\n                onHiding={props.togglePopup}\r\n                resizeEnabled={true}\r\n                contentRender={() => <RenderContent actionType={props.actionType} togglePopup={props.togglePopup}/>}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n","import Button from 'devextreme-react/button';\r\nimport React, {useState} from 'react';\r\nimport List, {ItemDragging} from 'devextreme-react/list';\r\nimport {toJS} from 'mobx';\r\nimport todoStore, {TodoType} from \"../Store/Todo\";\r\nimport {CheckBox} from 'devextreme-react/check-box';\r\nimport {PopupForChanging} from \"../Popup/Popup\";\r\nimport Toolbar, {Item} from 'devextreme-react/toolbar';\r\nimport notify from \"devextreme/ui/notify\";\r\nimport {useHistory} from \"react-router\";\r\nimport userStore from \"../Store/Users\"\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {TodoResponseType} from \"../API/appAPI\";\r\nimport styles from './testList.module.css';\r\n\r\ntype ListItemTmplPropsType = {\r\n    data: {\r\n        data: TodoResponseType;\r\n        index: number;\r\n    };\r\n    togglePopup: () => void;\r\n};\r\ntype ListPropsType = { todos: TodoType[]};\r\n\r\n\r\n\r\nconst ListItemTmpl: React.FC<ListItemTmplPropsType> = observer((props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.taskText}>\r\n                <CheckBox value={props.data.data.completed} onValueChange={() => {\r\n                    todoStore.setActiveTodoId(props.data.data.id);\r\n                    todoStore\r\n                        .completeTodo(todoStore.activeTodoId.id, !props.data.data.completed)\r\n                        .catch(e => console.log(e));\r\n                }}/>\r\n                   <p>{props.data.data.title}</p>\r\n\r\n            </div>\r\n            <div>\r\n                <Button width={45} style={{margin: '10px'}} icon='rename' onClick={() => {\r\n                    todoStore.setActionType('Change')\r\n                    props.togglePopup()\r\n                    todoStore.setActiveTodoId(props.data.data.id, props.data.data.title);\r\n                }}/>\r\n                <Button\r\n                    width={45}\r\n                    icon=\"trash\"\r\n                    type=\"danger\"\r\n                    onClick={() => todoStore.deleteTodo(toJS(props.data.data.id))}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n\r\nfunction renderLabel() {\r\n    return <div className=\"toolbar-label\"><b>Todo&apos;s for</b> {userStore.activeUser?.name}</div>;\r\n}\r\n\r\nexport const TestListComponent: React.FC<ListPropsType> = (props ) => {\r\n    const history = useHistory();\r\n    const backButtonOptions = {\r\n        type: 'back',\r\n        onClick: () => {\r\n            history.push('/')\r\n            todoStore.todos = [] //TODO узнать насчет прямого изменения без экшена\r\n            notify('Здесь будет возврат на юзеров');\r\n        }\r\n    };\r\n    const [isPopupVisible, setPopupVisibility] = useState<boolean>(false);\r\n    const togglePopup = () => {\r\n        setPopupVisibility(!isPopupVisible);\r\n    };\r\n    const addButtonOptions = {\r\n        icon: 'plus',\r\n        onClick: () => {\r\n            todoStore.setActionType('Add');\r\n            setPopupVisibility(!isPopupVisible);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Toolbar>\r\n                <Item location=\"before\"\r\n                      widget=\"dxButton\"\r\n                      options={backButtonOptions}/>\r\n                <Item location=\"before\"\r\n                      widget=\"dxButton\"\r\n                      options={refreshButtonOptions}/>\r\n                <Item location=\"after\"\r\n                      locateInMenu=\"auto\"\r\n                      widget=\"dxButton\"\r\n                      options={addButtonOptions}/>\r\n                <Item location=\"center\"\r\n                      locateInMenu=\"never\"\r\n                      render={renderLabel}/>\r\n            </Toolbar>\r\n            <List\r\n                height={'100vh'}\r\n                searchMode={'contains'}\r\n                searchExpr={['title']}\r\n                searchEnabled={true}\r\n                itemComponent={(data) => (\r\n                    <ListItemTmpl data={data} togglePopup={togglePopup}/>\r\n                )}\r\n                dataSource={props.todos}\r\n                selectionMode=\"multiple\"\r\n                pageLoadMode=\"nextButton\"\r\n                scrollByContent={true}\r\n                showScrollbar=\"never\"\r\n                style={{padding: '22px', margin: '10px'}}\r\n            >\r\n                <ItemDragging\r\n                    allowReordering={true}\r\n                />\r\n            </List>\r\n            <PopupForChanging actionType={todoStore.actionType} isPopupVisible={isPopupVisible} togglePopup={togglePopup}/>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nconst refreshButtonOptions = {\r\n    icon: 'refresh',\r\n    onClick: () => {\r\n        notify('Здесь будет обновление!');\r\n    }\r\n};\r\n\r\n\r\n\r\n","import {useEffect} from \"react\";\r\nimport todoStore from '../Store/Todo';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {TestListComponent} from \"../TestList/TestList\";\r\nimport {useParams} from \"react-router\";\r\n\r\nexport const Todos = observer(() => {\r\n        const params = useParams<{ userId: string }>();\r\n        useEffect(() => {\r\n            todoStore.fetchTodo().catch(e => console.log(e))\r\n        }, [])\r\n\r\n    const userTodos = todoStore.todos.filter((t) => t.userId === +params.userId)\r\n        // console.log((userTodos1.map(t => toJS(t)))) //TODO не могу понять, как это влияет\r\n        return <>\r\n                <TestListComponent todos={userTodos}/>\r\n            </>\r\n    }\r\n)","import React, {useEffect, useMemo, useState} from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport userStore from \"../Store/Users\"\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport List, {MenuItem} from 'devextreme-react/list';\r\nimport notify from 'devextreme/ui/notify';\r\nimport {ItemClickEvent} from \"devextreme/ui/list\";\r\nimport {Redirect} from \"react-router\";\r\nimport styles from './users.module.css';\r\ntype ListItemPropsType = {\r\n    data: { id: number, name: string }\r\n}\r\ntype UsersPropsType = {}\r\n\r\nconst style = {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n}\r\n\r\nconst ListItem = (props: ListItemPropsType) => {\r\n    return (\r\n        <pre style={style}>\r\n                    <b>{props.data.name}</b>\r\n                    <b>Users id: {props.data.id}</b>\r\n            </pre>\r\n    );\r\n};\r\n\r\nexport const Users: React.FC<UsersPropsType> = observer((props) => {\r\n    const [activeId, setActiveId] = useState<string>('');\r\n    const selectItem = ({itemData, ...rest}: ItemClickEvent) => {\r\n        userStore.setActiveUser(itemData)\r\n        setActiveId(itemData.id)\r\n    };\r\n    const showItem = ({itemData}: any) => {\r\n        notify({\r\n            message: `Name: ${itemData.name} ID: ${itemData.id}`,\r\n            width: 250,\r\n            height: 250,\r\n            shading: true\r\n        }, \"info\", 2000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        userStore.getUsers()\r\n            .catch(e => {\r\n                userStore.setStatus(e)\r\n            })\r\n    }, [])\r\n    const userMemo = useMemo(() => {\r\n        return userStore.users.map((u) => {\r\n            return {id: u.id, name: u.name}\r\n        })\r\n    }, [userStore.users])\r\n\r\n    if (activeId !== '') {\r\n        return <Redirect to={`/todos/${activeId}`}/>\r\n    }\r\n    if (userStore.userResponseStatus) {\r\n        notify({\r\n            message: userStore.userResponseStatus,\r\n            width: 200,\r\n            height: 50,\r\n            shading: true\r\n        })\r\n    }\r\n\r\n    return <div className={styles.main}>\r\n        <h3 className={styles.title}> Выберите юзера </h3>\r\n        <div className={styles.container}>\r\n            <List\r\n                // height={'90vh'}\r\n                dataSource={userMemo}\r\n                itemComponent={ListItem}\r\n                onItemClick={selectItem}\r\n            >\r\n                <MenuItem\r\n                    text=\"Show Details\"\r\n                    action={showItem}\r\n                />\r\n            </List>\r\n        </div>\r\n    </div>\r\n})","import React from 'react';\nimport 'devextreme/dist/css/dx.light.css';\nimport style from './App.module.css'\nimport {Todos} from \"./Todos/Todos\";\nimport {Users} from \"./Users/Users\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\n\ntype AppPropsType = {}\ntype AppStateType = {}\n\nclass App extends React.Component<AppPropsType, AppStateType> {\n    render() {\n        return (\n            <HashRouter>\n                <div className={style.main}>\n                    <div className={style.sidebar}></div>\n                    <div className={style.content}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Users/>}/>\n                            <Route exact path={'/todos/:userId?'} render={() => <Todos/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}